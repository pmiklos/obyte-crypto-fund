{
	bounce_fees: { base: 10000 },
	getters: `{
		$PORTFOLIO_SIZE = 2;
		$ASSET_DECIMALS_MULTIPLIER = 1e8;

		$_get_asset_balance = ($portfolio_spec) => {
			return balance[$portfolio_spec.asset];
		};

		$_get_asset_price = ($portfolio_spec) => {
			$price = data_feed[[oracles=params.oracle, feed_name=$portfolio_spec.feed, ifnone=0, type='auto']];
			require(typeof($price) == 'number', 'Not a number in ' || $portfolio_spec.feed);
			require($price >= 0, 'Negative price in ' || $portfolio_spec.feed);
			return $price;
		};

		$_calculate_asset_value = ($portfolio_spec) => {
			return $_get_asset_balance($portfolio_spec) * $_get_asset_price($portfolio_spec);
		};

		$calculate_portfolio_value = () => {
			return reduce(params.portfolio, $PORTFOLIO_SIZE, ($sum, $portfolio_spec) => {
				return $sum + $_calculate_asset_value($portfolio_spec);
			}, 0);
		};
	}`,
	init: `{
        $asset = var['asset'];
        $total_shares = var['total_shares'] OTHERWISE 0;
	}`,
	messages: {
	    cases: [
	        {
	            if: "{ !$asset }",
	            messages: [
	                {
	                    app: "asset",
	                    payload: {
	                        is_private: false,
                            is_transferrable: true,
                            auto_destroy: false,
                            fixed_denominations: false,
                            issued_by_definer_only: true,
                            cosigned_by_definer: false,
                            spender_attested: false
	                    }
	                },
					{
						app: "state",
						state: `{
							var['asset'] = response_unit;
							response['message'] = 'Initialized';
						}`
					}
	            ]
	        },
			{
				if: "{ trigger.data.intent == 'invest' }",
				init: `{
					$investment_value = reduce(params.portfolio, $PORTFOLIO_SIZE, ($sum, $portfolio_spec) => {
						$amount = trigger.outputs[$portfolio_spec.asset] OTHERWISE 0;
						$price = $_get_asset_price($portfolio_spec);
						$value = $amount * $price;
						return $sum + $value;
					}, 0);

					require($investment_value > 0, "No positive investment value");

					// portfolio value already includes this investment since it is immediately added to the AA balance
					$portfolio_value = $calculate_portfolio_value();

					require($portfolio_value > 0, 'No positive portfolio value');

					if ($investment_value == $portfolio_value) {
						$shares = 1 * $ASSET_DECIMALS_MULTIPLIER;
					} else {
						$shares = floor($total_shares * $investment_value / ($portfolio_value - $investment_value));
					}
				}`,
				messages: [
					{
						app: "payment",
						payload: {
							asset: "{$asset}",
							outputs: [{ address: "{trigger.address}", amount: "{$shares}"}]
						}
					},
					{
						app: "state",
						state : `{
							log('Shares: ' || $shares);
							var['total_shares'] += $shares;
							response['message'] = 'Invested';
						}`
					}
				]
			},
			{
				if: "{ trigger.data.intent == 'redeem' }",
				init: `{
					$shares_returned = trigger.output[[asset=$asset]];
					require($shares_returned > 0, "No shares returned");

					$share = $shares_returned / $total_shares;
					$amounts = [];
					foreach(params.portfolio, $PORTFOLIO_SIZE, ($portfolio_spec) => {
						$amounts[$portfolio_spec.asset] = floor($_get_asset_balance($portfolio_spec) * $share);
					});
				}`,
				messages: [{
					app: "payment",
					payload: {
						asset: "{params.portfolio[0].asset}",
						outputs: [{ address: "{trigger.address}", amount: "{$amounts[params.portfolio[0].asset]}"}]
					}
				},
				{
					app: "payment",
					payload: {
						asset: "{params.portfolio[1].asset}",
						outputs: [{ address: "{trigger.address}", amount: "{$amounts[params.portfolio[1].asset]}"}]
					}
				},
				{
					app: "state",
					state: `{
						var['total_shares'] -= $shares_returned;
						response['message'] = 'Redeemed';
					}`
				}]
			},
			{
				init: `{ bounce('Bad request'); }`,
				messages: [{app: "state", state: '{}'}]
			}
	    ]
	}
}